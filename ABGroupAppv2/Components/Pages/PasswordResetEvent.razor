@page "/passwordresetevent"
@using Radzen
@using Radzen.Blazor
@using Newtonsoft.Json
@using MySql.Data.MySqlClient
@using ABGroupAppv2
@using ABGroupAppv2.Models
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<RadzenTemplateForm TItem="PassResetDTO" Data="@model" Submit="@OnSubmit">
    <RadzenFieldset Text="Password Reset" class="rz-shadow-10">
        <RadzenStack Gap="1rem">

            <RadzenRow>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Caption">
                        The new password must contain at least:<br />
                        <ul>
                            <li>1 or more Uppercase and Lowercase character</li>
                            <li>1 or more Special Character</li>
                            <li>1 or more Numbers</li>
                        </ul>
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center">
                @*----Supplier Code----*@
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Supplier Code" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8">
                    <RadzenTextBox Name="SupplierCode" Style="width: 70%;  border: solid; border-width: 1px;" @bind-Value="@model.SupplierCode" />
                    <RadzenColumn>
                        <RadzenRequiredValidator Component="SupplierCode" Text="Supplier Code is required" Popup=true Style="position: relative" />
                    </RadzenColumn>
                </RadzenColumn>
                
                @*----Email----*@
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Email" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8">
                    <RadzenTextBox Name="Email" Style="width: 70%;  border: solid; border-width: 1px;" @bind-Value="@model.Email" />
                    <RadzenColumn>
                        <RadzenRequiredValidator Component="Email" Text="Email is required" Popup=true Style="position: relative" />
                    </RadzenColumn>
                </RadzenColumn>

                @*----Password----*@
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="New Password" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8">
                    <RadzenTextBox Name="Password" Style="width: 70%; border: solid; border-width: 1px;" @bind-Value="@model.NewPassword" Type="Password"/>
                    <RadzenColumn>
                        <RadzenRequiredValidator Component="Password" Text="Password is required" Popup=true Style="position: relative" />
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenRegexValidator Component="Password" Text="Password does not meet satisfy required complexity" Pattern="^(?=.*[a-zA-Z])(?=.*\d)(?=.*[\W_]).{8,}$" Popup=true Style="position: relative" />
                    </RadzenColumn>
                </RadzenColumn>

                @*----Confirm Password----*@
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Confirm Password" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8">
                    <RadzenTextBox Name="ConfirmPassword" Style="width: 70%;  border: solid; border-width: 1px;" @bind-Value="@model.ConfirmPassword" Type="Password" />
                    <RadzenColumn>
                        <RadzenRequiredValidator Component="ConfirmPassword" Text="Repeat new password" Popup=true />
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(@model.ConfirmPassword)) Value=@model.NewPassword Component="ConfirmPassword" Text="Password does not match" Popup=true />
                    </RadzenColumn>
                </RadzenColumn>
            </RadzenRow>
            <br/>

            @*----Submit/Cancel Buttons----*@
            <RadzenRow AlignItems="AlignItems.Center" Style="margin-bottom: 3rem;">
                <RadzenColumn Size="12" Offset="0" SizeMD="8" OffsetMD="4">
                    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Small" Icon="send" Click=@OnBusyClick IsBusy=@busy BusyText = "Submit" Text="Submit" Style="width: 100px;" />
                </RadzenColumn>
                <RadzenColumn Size="12" Offset="0" SizeMD="8" OffsetMD="4">
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Small" Icon="cancel" Text="Cancel" Click="Cancel" Style="width: 100px;" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenFieldset>
</RadzenTemplateForm>

@code {
    bool busy;
    PassResetDTO model = new PassResetDTO();

    private async Task OnSubmit(PassResetDTO model)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "https://web.abbey.ie/AbbeyGroupIR/api/Auth/ChangePassword");
        var content = new StringContent(JsonConvert.SerializeObject(new { SupplierCode = model.SupplierCode, Email = model.Email, Password = model.NewPassword}), null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();
        var result = (JsonConvert.DeserializeObject<bool>(await response.Content.ReadAsStringAsync()));
        if(result == true)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Password Change Successful", Detail = "Your password has now been reset", Duration = 4000 });
            await sendmail();
            NavigationManager.NavigateTo("/login");

        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error - Password Not Changed", Detail = "Confliction with information entered", Duration = 4000 });
        }
    }

    async Task OnBusyClick()
    {
        busy = true;
        await Task.Delay(2000);
        busy = false;
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/login");
    }

    private async Task sendmail()
    {
        var mailComp = new MailCompDTO
            {
                ToEmails = new List<string>{model.Email},
                Body = "Dear User, <br><br>Please be advised that the password for "+model.Email+" has been changed.<br><br>Kind Regards,<br>Abbey Group",
                SenderEmail = "donotreply@abbey.ie",
                Subject = "AbbeyGo Password Changed"
    };
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "https://web.abbey.ie/AbbeyGroupIR/api/Mail/SendMail");
        var content = new StringContent(JsonConvert.SerializeObject(mailComp), null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();

    }
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    void ShowNotificationWithCustomContent()
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Duration = 40000,
                SummaryContent = ns =>@<RadzenText Style="TextStyle.H6">Custom summary: <br /> @DateTime.Now</RadzenText>,
                DetailContent = ns => @<RadzenButton Text="Clear" Click="@(args => ns.Messages.Clear())" />
        });
    }

}
