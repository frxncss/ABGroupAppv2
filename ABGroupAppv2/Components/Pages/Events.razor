@page "/event"
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@using ABGroupAppv2.Models
@using ABGroupAppv2.Components.Pages
@using MySql.Data.MySqlClient
@using Newtonsoft.Json
@inject IWordDocumentService WordDocumentService
@inject NotificationService NotificationService

@if (!isLoading)
{
     <div style="display: flex; justify-content: center; align-items: center; height: 100vh;"> 
        <RadzenStack AlignItems="AlignItems.Center" Class="rz-m-12" Gap="0.5rem">
            <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/><br/>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Please Wait</RadzenText>
        </RadzenStack>
     </div>
}
else{
    <div class="scheduler-container">
    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px; width: auto;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
        TextProperty="Text" SelectedIndex="0" 
        AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
        <RadzenMonthView/>
        <div class="status-indicators">
            <RadzenRow>
                <RadzenIcon Icon="circle" IconColor="Green" />
                <RadzenText TextStyle="TextStyle.Button">Ongoing</RadzenText>
                <RadzenIcon Icon="circle" IconColor="Red" />
                <RadzenText TextStyle="TextStyle.Button">Completed</RadzenText>
                <RadzenIcon Icon="circle" IconColor="Blue" />
                <RadzenText TextStyle="TextStyle.Button">Pending</RadzenText>
            </RadzenRow>
        </div>
    </RadzenScheduler>
    </div>
}
@code {
    RadzenScheduler<Appointment> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    // IList<Appointment> appointments = new List<Appointment>
    // {
    //     new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "GCNE558577" },
    //     new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "GMEM559885" },
    //     new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "GMEM559886" },
    //     new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "GMME563398" },
    //     new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "GREM550334" },
    //     new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "GREM550335" },
    //     0new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "GREM550344" }
    //GRE013 };
    bool isLoading = false;
    DateTime tomorrow = DateTime.Today.AddDays(1);
    IList<Appointment> appointments = new List<Appointment>();

    protected override async Task OnInitializedAsync()
    {
        var today = DateTime.Today;
        var startOfMonth = new DateTime(today.Year, today.Month, 1);
        await getBookingService(startOfMonth, startOfMonth.AddMonths(1));

    }

    private async Task getBookingService(DateTime initialDate, DateTime finalDate)
    {
        var supplier = await SecureStorage.GetAsync("SupplierCode") ?? "KEL004";
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, $"https://web.abbey.ie/AbbeyGroupIR/api/BHD/GetBookingBySupplier?supplier={supplier}&initialDate={initialDate.ToString("yyyy-MM-dd")}&finalDate={finalDate.ToString("yyyy-MM-dd")}");
        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();
        var bookings = (JsonConvert.DeserializeObject<List<SupplierBookingDTO>>(response.Content.ReadAsStringAsync().Result));
        foreach (var booking in bookings)
        {
            var bookingRef = booking.bookingReference;
            var pickUp = booking.pickUpDate;
            var dropOff = booking.dropOffDate;
            appointments.Add(new Appointment { Start = pickUp, End = dropOff, Text = bookingRef });
        }
        isLoading = true;
    }



    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {

        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        //Highlight working hours (1-24)
        // if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 0 && args.Start.Hour < 23)
        // {
        //     args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        // }
        // var startOfMonth = new DateTime(2024, 3, 01);
        // getBookingService(DateTime.Now, DateTime.Now);
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        // var bookingRef = args.Data.bookingReference;
        // var pickUp = args.Data.pickUpDate;
        // var dropOff = args.Data.dropOffDate;
        var copy = new Appointment
             {
                 Start = args.Data.Start,
                 End = args.Data.End,
                 Text = args.Data.Text
             };

        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, $"https://web.abbey.ie/AbbeyGroupIR/api/BHD/GetBookingItineraryVoucher?bookingReference={args.Data.Text}&pickUpDate={args.Data.Start.ToString("yyyy-MM-dd")}&dropOffDate={args.Data.End.ToString("yyyy-MM-dd")}");
        try
        {
            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var booking = (JsonConvert.DeserializeObject<BookingFinalDocsDTO>(response.Content.ReadAsStringAsync().Result));
            booking.pickUpDate = args.Data.Start;
            booking.dropOffDate = args.Data.End;
            if (booking.bookingService != null || booking.bookingItinerary != null || booking.consultantName != null)
            {
                var data = await DialogService.OpenAsync<EditEvent>("Booking Information", new Dictionary<string, object> { { "ServiceDetails", booking } });
            }
            else
            {
                var data = await DialogService.OpenAsync<EditPendingEvent>("Booking Information", new Dictionary<string, object> { { "ServiceDetails", booking } });
            }
        }
        catch(Exception e)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error - Event details", Detail = "Event details didn't load correctly, please try again.", Duration = 4000 });
            NavigationManager.NavigateTo("/event", forceLoad: true);
        }



        await scheduler.Reload();
        //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        DateTime timeprc = args.Data.Start.Date;
        if (timeprc > DateTime.Today && args.Data.Start > DateTime.Today && args.Data.End > DateTime.Today)
        {
            args.Attributes["style"] = "background: blue";
        }
        else if (args.Data.Start < DateTime.Today && args.Data.End < DateTime.Today)
        {
            args.Attributes["style"] = "background: red";
        }
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop
        else if (args.Data.Start == DateTime.Today || args.Data.End >= DateTime.Today)
        {
            args.Attributes["style"] = "background: green";
        }


    }

}