@page "/login"
@using ABGroupAppv2.Models
@using MySql.Data.MySqlClient
@using Newtonsoft.Json
@using ABGroupAppv2.Components
@inject NavigationManager NavigationManager
@inject DialogService DialogService

<div class="container">
			<div class="bg"></div>
			<div class="bg bg2"></div>
			<div class="bg bg3"></div>
            <div class="screen">
                <div class="screen__content">
			        <img src="../abgroupnewlogo.png" style="width: 170px; height: 80px; margin-bottom: 50px;display: block; margin: 0 auto; position: center;"><br/>
                    <form class="login" @onsubmit="UserLogin">
				        <div class="login__field">
					        <i class="login__icon fas fa-user"></i>
                            <input type="text" class="login__input" placeholder="Email" @bind="email">
                        </div>
                        <div class="login__field">
                            <i class="login__icon fas fa-lock"></i>
                            <input type="password" class="login__input" placeholder="Password" @bind="password">
                        </div>
                        <div>
                            <a href="/passwordresetevent" style="font-size: 13px;">Forgot Password ?</a>
                        </div>
                        <br/>
                        <button type="submit" class="button login__submit">
                            <span class="button__text">Log In</span>
                            <i class="button__icon fas fa-chevron-right"></i>
                            @if (isLoading)
                            {
                                <div class="spinner"></div>
                            }
                        </button>
                    </form>
                    <br/>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p>@errorMessage</p>
                    }
		        </div>
	        </div>
    @*      <RadzenTemplateForm Data="@order" Submit="@((Order args) => { Submit(args); })">
            <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
                <RadzenColumn Size="6" SizeMD="6">
                    <RadzenStack>
                        <RadzenFieldset Text="Password Reset">
                            <RadzenStack Gap="1rem">
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Supplier Code" Component="CardNr" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox Style="width: 100%;" Name="CardNr" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Email" Component="CardNr" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox Style="width: 100%;" Name="CardNr" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Password" Component="CardNr" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox Style="width: 100%;" Name="CardNr" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="ReType Password" Component="CardNr" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox Style="width: 100%;" Name="CardNr" />
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenFieldset>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" Click="@Cancel" />
            </RadzenStack>
         </RadzenTemplateForm> *@
</div>

@code {
    private string? email;
    private string? password;
    private string? errorMessage;
    private bool isLoading = false;

    private async Task UserLogin()
    {
        isLoading = true;
        // Check if email and password are not null or empty
        if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password))
        {
            errorMessage = "Email and Password are required.";
            isLoading = false;
            return;
        }

        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "https://web.abbey.ie/AbbeyGroupIR/api/Auth/Authenticate");
        var content = new StringContent(JsonConvert.SerializeObject(new { Email = email, Password = password }), null, "application/json");
        request.Content = content;
        try
        {
            var response = await client.SendAsync(request);
            //response.EnsureSuccessStatusCode();
            var user = (JsonConvert.DeserializeObject<UserDTO>(response.Content.ReadAsStringAsync().Result));
            //var test = SecureStorage.GetAsync("IsLoggedIn");
            if (user != null && user.IsLoggedIn)
            {
                // Store authentication token securely
                await SecureStorage.SetAsync("IsLoggedIn", "Authenticated");
                await SecureStorage.SetAsync("SupplierCode", user.SupplierCode);
                await SecureStorage.SetAsync("Email", user.Email);
                await SecureStorage.SetAsync("Name", user.Name);
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Wrong email address or password. Please try again";
            }

        }
        catch(Exception err)
        {
            errorMessage = "Failed to Authenticate. Please try again";
        }
        finally
        {
            isLoading = false; // Set loading to false when login process ends
        }

    }
    private void ShowForgotPasswordDialog()
    {
        DialogService.Open<PasswordResetEvent>("Password Reset", new Dictionary<string, object>() {
            { "Email", email }
        });
    }
}
